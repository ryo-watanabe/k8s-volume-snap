/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ryo-watanabe/k8s-volume-snap/pkg/apis/volumesnapshot/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectstoreConfigLister helps list ObjectstoreConfigs.
// All objects returned here must be treated as read-only.
type ObjectstoreConfigLister interface {
	// List lists all ObjectstoreConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectstoreConfig, err error)
	// ObjectstoreConfigs returns an object that can list and get ObjectstoreConfigs.
	ObjectstoreConfigs(namespace string) ObjectstoreConfigNamespaceLister
	ObjectstoreConfigListerExpansion
}

// objectstoreConfigLister implements the ObjectstoreConfigLister interface.
type objectstoreConfigLister struct {
	indexer cache.Indexer
}

// NewObjectstoreConfigLister returns a new ObjectstoreConfigLister.
func NewObjectstoreConfigLister(indexer cache.Indexer) ObjectstoreConfigLister {
	return &objectstoreConfigLister{indexer: indexer}
}

// List lists all ObjectstoreConfigs in the indexer.
func (s *objectstoreConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectstoreConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectstoreConfig))
	})
	return ret, err
}

// ObjectstoreConfigs returns an object that can list and get ObjectstoreConfigs.
func (s *objectstoreConfigLister) ObjectstoreConfigs(namespace string) ObjectstoreConfigNamespaceLister {
	return objectstoreConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectstoreConfigNamespaceLister helps list and get ObjectstoreConfigs.
// All objects returned here must be treated as read-only.
type ObjectstoreConfigNamespaceLister interface {
	// List lists all ObjectstoreConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectstoreConfig, err error)
	// Get retrieves the ObjectstoreConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectstoreConfig, error)
	ObjectstoreConfigNamespaceListerExpansion
}

// objectstoreConfigNamespaceLister implements the ObjectstoreConfigNamespaceLister
// interface.
type objectstoreConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectstoreConfigs in the indexer for a given namespace.
func (s objectstoreConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectstoreConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectstoreConfig))
	})
	return ret, err
}

// Get retrieves the ObjectstoreConfig from the indexer for a given namespace and name.
func (s objectstoreConfigNamespaceLister) Get(name string) (*v1alpha1.ObjectstoreConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectstoreconfig"), name)
	}
	return obj.(*v1alpha1.ObjectstoreConfig), nil
}
